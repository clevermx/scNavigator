(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{81:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return i})),t.d(e,"metadata",(function(){return l})),t.d(e,"toc",(function(){return c})),t.d(e,"default",(function(){return p}));var a=t(3),r=t(7),o=(t(0),t(87)),i={id:"scn_plot_data",title:"scNavigator data for plotting"},l={unversionedId:"scn_plot_data",id:"scn_plot_data",isDocsHomePage:!1,title:"scNavigator data for plotting",description:"Plot data contains of three parts: fields, data and annotations and stored in file called plot_data.json.",source:"@site/docs/dataset_plot_data.md",slug:"/scn_plot_data",permalink:"/scn/docs/docs/scn_plot_data",editUrl:"https://github.com/ctlab/scNavigator/edit/master/scn_docs/docs/dataset_plot_data.md",version:"current",sidebar:"docs",previous:{title:"scNavigator dataset descriptor",permalink:"/scn/docs/docs/scn_dataset_json"},next:{title:"scNavigator: expression dataset",permalink:"/scn/docs/docs/scn_expression"}},c=[{value:"<code>fields</code>",id:"fields",children:[]},{value:"<code>data</code>",id:"data",children:[]},{value:"<code>annotations</code>",id:"annotations",children:[]},{value:"Whole file",id:"whole-file",children:[]}],s={toc:c};function p(n){var e=n.components,t=Object(r.a)(n,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Plot data contains of three parts: ",Object(o.b)("inlineCode",{parentName:"p"},"fields"),", ",Object(o.b)("inlineCode",{parentName:"p"},"data")," and ",Object(o.b)("inlineCode",{parentName:"p"},"annotations")," and stored in file called ",Object(o.b)("inlineCode",{parentName:"p"},"plot_data.json"),"."),Object(o.b)("h3",{id:"fields"},Object(o.b)("inlineCode",{parentName:"h3"},"fields")),Object(o.b)("p",null,"Fields describe which variables for each cell are present, what type they are (numeric or factor) and value range / factor levels.\nCurrently, we only support numeric and factor variables."),Object(o.b)("p",null,"Fields only support two types: ",Object(o.b)("inlineCode",{parentName:"p"},'"numeric"')," and ",Object(o.b)("inlineCode",{parentName:"p"},'"factor"'),"."),Object(o.b)("p",null,"Numeric variables have to be provided with the ",Object(o.b)("inlineCode",{parentName:"p"},'"range"')," that these\nvalues can take. ",Object(o.b)("inlineCode",{parentName:"p"},'"range"')," is a two-element list of minimum and maximum value of the described variable."),Object(o.b)("p",null,"Factor variables have to be provided with all the levels (values) that this variable can take."),Object(o.b)("p",null,"Example for a valid ",Object(o.b)("inlineCode",{parentName:"p"},"fields")," structure might look like:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n  "tSNE_1": {\n    "type": "numeric",\n    "range": [\n      -68.8883,\n      66.9387\n    ]\n  },\n  "tSNE_2": {\n    "type": "numeric",\n    "range": [\n      -54.9217,\n      70.4228\n    ]\n  },\n  "UMAP_1": {\n    "type": "numeric",\n    "range": [\n      -12.9358,\n      13.655\n    ]\n  },\n  "UMAP_2": {\n    "type": "numeric",\n    "range": [\n      -15.3023,\n      16.4768\n    ]\n  },\n  "Cluster": {\n    "type": "factor",\n    "levels": [\n      "0",\n      "1",\n      "2",\n      "3",\n      "4",\n      "5",\n      "6",\n      "7",\n      "8",\n      "9",\n      "10",\n      "11",\n      "12",\n      "13",\n      "14",\n      "15",\n      "16",\n      "17",\n      "18",\n      "19"\n    ]\n  },\n  "nUmi": {\n    "type": "numeric",\n    "range": [\n      669818,\n      1158590\n    ]\n  },\n  "nGene": {\n    "type": "numeric",\n    "range": [\n      353,\n      11159\n    ]\n  },\n  "nUmiLog2": {\n    "type": "numeric",\n    "range": [\n      19.3534,\n      20.1439\n    ]\n  },\n  "nGeneLog2": {\n    "type": "numeric",\n    "range": [\n      8.4635,\n      13.4459\n    ]\n  }\n}\n')),Object(o.b)("h3",{id:"data"},Object(o.b)("inlineCode",{parentName:"h3"},"data")),Object(o.b)("p",null,"Data simply contains information about every cell in the dataset. Data may contain extra fields (that are not present in",Object(o.b)("inlineCode",{parentName:"p"},"fields"),"),\nhowever, these fields won't show up in the scNavigator.\nExample of valid ",Object(o.b)("inlineCode",{parentName:"p"},"data")," field is shown below:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "tSNE_1": 64.3251,\n    "tSNE_2": 11.3943,\n    "UMAP_1": 1.3749,\n    "UMAP_2": 16.074,\n    "Cluster": "6",\n    "nUmi": 890612,\n    "nGene": 6899,\n    "nUmiLog2": 19.7644,\n    "nGeneLog2": 12.7522,\n    "_row": "00ca0d37-b787-41a4-be59-2aff5b13b0bd"\n  },\n  {\n    "tSNE_1": -10.7318,\n    "tSNE_2": 8.2139,\n    "UMAP_1": 1.8595,\n    "UMAP_2": -2.9429,\n    "Cluster": "10",\n    "nUmi": 939514,\n    "nGene": 3142,\n    "nUmiLog2": 19.8416,\n    "nGeneLog2": 11.6175,\n    "_row": "0103aed0-29c2-4b29-a02a-2b58036fe875"\n  },\n  {\n    "tSNE_1": -41.7568,\n    "tSNE_2": -31.4512,\n    "UMAP_1": -6.6463,\n    "UMAP_2": 4.0747,\n    "Cluster": "0",\n    "nUmi": 918941,\n    "nGene": 3802,\n    "nUmiLog2": 19.8096,\n    "nGeneLog2": 11.8925,\n    "_row": "01a5dd09-db87-47ac-be78-506c690c4efc"\n  },\n  ...\n]\n')),Object(o.b)("h3",{id:"annotations"},Object(o.b)("inlineCode",{parentName:"h3"},"annotations")),Object(o.b)("p",null,"Annotations are usually shown on top of the plot.\nFor that you will need to tell scNavigator ",Object(o.b)("inlineCode",{parentName:"p"},"type")," of annotation (",Object(o.b)("inlineCode",{parentName:"p"},'"text"'),", ",Object(o.b)("inlineCode",{parentName:"p"},'"polygon"')," or ",Object(o.b)("inlineCode",{parentName:"p"},'"arrows"'),"),\nwhich fields to use as coordinates (",Object(o.b)("inlineCode",{parentName:"p"},"coords"),") and coordinates of annotation.\n",Object(o.b)("inlineCode",{parentName:"p"},"value")," field is used to take the actual value from the data"),Object(o.b)("p",null,"Below is an example of valid ",Object(o.b)("inlineCode",{parentName:"p"},"annotations")," for text annotations."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'\n{\n  "tsne_Cluster_centers": {\n    "type": "text",\n    "value": "Cluster",\n    "coords": [\n      "tSNE_1",\n      "tSNE_2"\n    ],\n    "data": [\n      {\n        "Cluster": "0",\n        "tSNE_1": -35.5756,\n        "tSNE_2": -32.0876,\n        "Text": "0"\n      },\n      {\n        "Cluster": "1",\n        "tSNE_1": -0.7239,\n        "tSNE_2": -17.0211,\n        "Text": "1"\n      },\n      ...\n    ]\n  }\n}\n')),Object(o.b)("p",null,"Polygon are sometimes useful to highlight borders of the clusters.\nPolygon vertices are connected one by one in the order they are listed in the ",Object(o.b)("inlineCode",{parentName:"p"},"data")," field, and grouped by\nvariable shown in the ",Object(o.b)("inlineCode",{parentName:"p"},'"value"')," field. In case below points are connected by field ",Object(o.b)("inlineCode",{parentName:"p"},'"group"'),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n "tsne_Cluster_borders": {\n   "type": "polygon",\n   "value": "group",\n   "coords": [\n     "tSNE_1",\n     "tSNE_2"\n   ],\n   "data": [\n     {\n       "tSNE_1": -1.3811,\n       "tSNE_2": -56.3444,\n       "Cluster": "13",\n       "group": "gr1_1"\n     },\n     {\n       "tSNE_1": -2.8141,\n       "tSNE_2": -55.6834,\n       "Cluster": "13",\n       "group": "gr1_1"\n     },\n     {\n       "tSNE_1": -4.2503,\n       "tSNE_2": -55.0224,\n       "Cluster": "13",\n       "group": "gr1_1"\n     },\n     ...\n   ]\n }\n}\n\n')),Object(o.b)("p",null,"Type ",Object(o.b)("inlineCode",{parentName:"p"},"arrows")," is somewhat special. It has ",Object(o.b)("inlineCode",{parentName:"p"},"data_start")," and ",Object(o.b)("inlineCode",{parentName:"p"},"data_end")," fields that specify arrow coordinates.\nAnnotation of type ",Object(o.b)("inlineCode",{parentName:"p"},"arrows")," were mostly designed to show RNA velocity or results of trajectory inference methods\non top of the dimensionality reduction plot."),Object(o.b)("p",null,"Both lists ",Object(o.b)("inlineCode",{parentName:"p"},"data_start")," and ",Object(o.b)("inlineCode",{parentName:"p"},"data_end")," must have equal length. ",Object(o.b)("inlineCode",{parentName:"p"},"data_start[i]")," and ",Object(o.b)("inlineCode",{parentName:"p"},"data_end[i]")," describe i-th arrow."),Object(o.b)("p",null,"Valid json object for ",Object(o.b)("inlineCode",{parentName:"p"},"arrows")," type will look something like:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'\n{\n  "type": "arrows",\n  "coords": [\n    "UMAP_1",\n    "UMAP_2"\n  ],\n  "data_start": [\n    {\n      "UMAP_1": -8.6807,\n      "UMAP_2": -6.522\n    },\n    {\n      "UMAP_1": -8.6807,\n      "UMAP_2": -6.0223\n    },\n    ...\n  ], \n  "data_end": [\n    {\n      "UMAP_1": -8.4769,\n      "UMAP_2": -7.129\n    },\n    {\n      "UMAP_1": -8.426,\n      "UMAP_2": -6.8369\n    },\n    ...\n  ]\n}\n\n')),Object(o.b)("h3",{id:"whole-file"},"Whole file"),Object(o.b)("p",null,"Valid file ",Object(o.b)("inlineCode",{parentName:"p"},"plot_data.json")," will look something like:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'\n{\n  "fields": {\n      "tSNE_1": {\n        "type": "numeric",\n        "range": [\n          -68.8883,\n          66.9387\n        ]\n      },\n      "tSNE_2": {\n        "type": "numeric",\n        "range": [\n          -54.9217,\n          70.4228\n        ]\n      },\n      "UMAP_1": {\n        "type": "numeric",\n        "range": [\n          -12.9358,\n          13.655\n        ]\n      },\n      "UMAP_2": {\n        "type": "numeric",\n        "range": [\n          -15.3023,\n          16.4768\n        ]\n      },\n      "Cluster": {\n        "type": "factor",\n        "levels": [\n          "0",\n          "1",\n          "2",\n          "3",\n          "4",\n          "5",\n          "6",\n          "7",\n          "8",\n          "9",\n          "10",\n          "11",\n          "12",\n          "13",\n          "14",\n          "15",\n          "16",\n          "17",\n          "18",\n          "19"\n        ]\n      },\n      "nUmi": {\n        "type": "numeric",\n        "range": [\n          669818,\n          1158590\n        ]\n      },\n      "nGene": {\n        "type": "numeric",\n        "range": [\n          353,\n          11159\n        ]\n      },\n      "nUmiLog2": {\n        "type": "numeric",\n        "range": [\n          19.3534,\n          20.1439\n        ]\n      },\n      "nGeneLog2": {\n        "type": "numeric",\n        "range": [\n          8.4635,\n          13.4459\n        ]\n      }\n    },\n  "data": [\n    {\n      "tSNE_1": 64.3251,\n      "tSNE_2": 11.3943,\n      "UMAP_1": 1.3749,\n      "UMAP_2": 16.074,\n      "Cluster": "6",\n      "nUmi": 890612,\n      "nGene": 6899,\n      "nUmiLog2": 19.7644,\n      "nGeneLog2": 12.7522,\n      "_row": "00ca0d37-b787-41a4-be59-2aff5b13b0bd"\n    },\n    {\n      "tSNE_1": -10.7318,\n      "tSNE_2": 8.2139,\n      "UMAP_1": 1.8595,\n      "UMAP_2": -2.9429,\n      "Cluster": "10",\n      "nUmi": 939514,\n      "nGene": 3142,\n      "nUmiLog2": 19.8416,\n      "nGeneLog2": 11.6175,\n      "_row": "0103aed0-29c2-4b29-a02a-2b58036fe875"\n    },\n    {\n      "tSNE_1": -41.7568,\n      "tSNE_2": -31.4512,\n      "UMAP_1": -6.6463,\n      "UMAP_2": 4.0747,\n      "Cluster": "0",\n      "nUmi": 918941,\n      "nGene": 3802,\n      "nUmiLog2": 19.8096,\n      "nGeneLog2": 11.8925,\n      "_row": "01a5dd09-db87-47ac-be78-506c690c4efc"\n    },\n    ...\n  ],\n  "annotations": {\n   "tsne_Cluster_centers": {\n     "type": "text",\n     "value": "Cluster",\n     "coords": [\n       "tSNE_1",\n       "tSNE_2"\n     ],\n     "data": [\n       {\n         "Cluster": "0",\n         "tSNE_1": -35.5756,\n         "tSNE_2": -32.0876,\n         "Text": "0"\n       },\n       {\n         "Cluster": "1",\n         "tSNE_1": -0.7239,\n         "tSNE_2": -17.0211,\n         "Text": "1"\n       },\n       ...\n     ]\n   },\n   "tsne_Cluster_borders": {\n     "type": "polygon",\n     "value": "group",\n     "coords": [\n       "tSNE_1",\n       "tSNE_2"\n     ],\n     "data": [\n       {\n         "tSNE_1": -1.3811,\n         "tSNE_2": -56.3444,\n         "Cluster": "13",\n         "group": "gr1_1"\n       },\n       {\n         "tSNE_1": -2.8141,\n         "tSNE_2": -55.6834,\n         "Cluster": "13",\n         "group": "gr1_1"\n       },\n       {\n         "tSNE_1": -4.2503,\n         "tSNE_2": -55.0224,\n         "Cluster": "13",\n         "group": "gr1_1"\n       },\n       ...\n     ]\n   }\n }\n}\n\n\n')))}p.isMDXComponent=!0},87:function(n,e,t){"use strict";t.d(e,"a",(function(){return d})),t.d(e,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=r.a.createContext({}),p=function(n){var e=r.a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},d=function(n){var e=p(n.components);return r.a.createElement(s.Provider,{value:e},n.children)},b={inlineCode:"code",wrapper:function(n){var e=n.children;return r.a.createElement(r.a.Fragment,{},e)}},u=r.a.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,i=n.parentName,s=c(n,["components","mdxType","originalType","parentName"]),d=p(t),u=a,m=d["".concat(i,".").concat(u)]||d[u]||b[u]||o;return t?r.a.createElement(m,l(l({ref:e},s),{},{components:t})):r.a.createElement(m,l({ref:e},s))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=n,l.mdxType="string"==typeof n?n:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);