(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),o=(t(0),t(87)),i={id:"scn_expression",title:"scNavigator: expression dataset"},s={unversionedId:"scn_expression",id:"scn_expression",isDocsHomePage:!1,title:"scNavigator: expression dataset",description:"Since scNavigator was designed to be used with thousands of different datasets in web, we needed a file-format",source:"@site/docs/dataset_expression.md",slug:"/scn_expression",permalink:"/scn/docs/docs/scn_expression",editUrl:"https://github.com/ctlab/scNavigator/edit/master/scn_docs/docs/dataset_expression.md",version:"current",sidebar:"docs",previous:{title:"scNavigator data for plotting",permalink:"/scn/docs/docs/scn_plot_data"},next:{title:"scNavigator: markers file",permalink:"/scn/docs/docs/scn_markers"}},c=[{value:"HDF5 file: <code>data.h5</code>",id:"hdf5-file-datah5",children:[{value:"Codes with conversion examples",id:"codes-with-conversion-examples",children:[]}]},{value:"<code>exp_data.json</code>",id:"exp_datajson",children:[]}],l={toc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Since scNavigator was designed to be used with thousands of different datasets in web, we needed a file-format\nthat allowed relatively quick access to any gene of interest in any of the datasets."),Object(o.b)("p",null,"We decided that we could use sparse matrix representation for counts data in hdf5 format.\nThe following structure of the hdf5 file was deeply influenced by how counts are stored in AnnData in scanpy,\nwhich is natural way to keep Compressed Sparse Column matrix in hdf5 file."),Object(o.b)("h2",{id:"hdf5-file-datah5"},"HDF5 file: ",Object(o.b)("inlineCode",{parentName:"h2"},"data.h5")),Object(o.b)("p",null,"Here and below CSC is Compressed Sparse Column matrix. Columns are genes, and this representation will allow us to\nquickly obtain expression levels for any gene."),Object(o.b)("p",null,"File ",Object(o.b)("inlineCode",{parentName:"p"},"data.h5")," has to have one group ",Object(o.b)("inlineCode",{parentName:"p"},"X"),". Within this group file should have 3 datasets:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"indices")," CSC format index array (int array)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"indptr")," CSC format index pointer array (int array)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"data")," data array of non-zero elements of the matrix (important: ",Object(o.b)("strong",{parentName:"li"},"float")," array)")),Object(o.b)("p",null,"Group ",Object(o.b)("inlineCode",{parentName:"p"},"X")," also has attribute ",Object(o.b)("inlineCode",{parentName:"p"},"shape")," which is two-element int array: ",Object(o.b)("inlineCode",{parentName:"p"},"[number of cells, number of genes]")),Object(o.b)("h3",{id:"codes-with-conversion-examples"},"Codes with conversion examples"),Object(o.b)("p",null,"To convert something like Seurat object to proper hdf5 file, you can use snippet below, or can use our converter."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-r"},'library(Seurat)\nlibrary(Matrix)\nlibrary(rhdf5)\n\n## here and below seurat is Seurat object\n\ncounts <- GetAssayData(seurat, "counts")\ncounts <- as(counts, "RsparseMatrix")\n\n\n## new h5 creation\n\nnewH5File <- file.path("data.h5")\n\nh5createFile(newH5File)\nh5createGroup(newH5File, "X")\n\ngenes <- nrow(counts)\nbarcodes <- ncol(counts)\nnonZero <- length(counts@x)\n\nh5createDataset(newH5File, "X/indptr", c(genes + 1),\n                storage.mode = "integer", level=9)\nh5write(counts@p, newH5File, "X/indptr")\n\nh5createDataset(newH5File, "X/indices", c(nonZero),\n                storage.mode = "integer", level=9)\nh5write(counts@j, newH5File, "X/indices")\n\nh5createDataset(newH5File, "X/data", c(nonZero),\n                storage.mode = "double", level=9)\nh5write(as.double(counts@x), newH5File, "X/data")\nh5closeAll()\n\nh5writeAttribute(c(barcodes, genes), newH5File, "shape")\n\nid <- H5Fopen(newH5File)\ngroup <- H5Gopen(id, "X")\nh5writeAttribute(c(barcodes, genes), group, "shape")\nh5closeAll()\n\n')),Object(o.b)("h2",{id:"exp_datajson"},Object(o.b)("inlineCode",{parentName:"h2"},"exp_data.json")),Object(o.b)("p",null,"This file simply contains gene names, cell barcodes/names and total UMI per cell.\nThis file must reflect row and column names of matrix ",Object(o.b)("inlineCode",{parentName:"p"},"data.h5")," which contains expression data."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n  "genes": ["TSPAN6", "DPM1", "SCYL3", "C1orf112", "CFH", "FUCA2", ...],\n  "barcodes": ["00ca0d37-b787-41a4-be59-2aff5b13b0bd","0103aed0-29c2-4b29-a02a-2b58036fe875", ... ],\n  "totalCounts": [890612, 939514, ...]\n}\n')),Object(o.b)("p",null,"When a user queries expression of gene ",Object(o.b)("inlineCode",{parentName:"p"},"CD14")," in the dataset, we first find index of this gene in ",Object(o.b)("inlineCode",{parentName:"p"},"genes")," array, and then ask server expression of a gene with this ID."),Object(o.b)("p",null,"I.e. on a client side we would do something like"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'\nlet geneId = expData.genes.indexOf("Cd14");\nlet geneExpression = getExpressionData(geneId); // request expression of geneId from the server\n\n')),Object(o.b)("p",null,"This is super important that file ",Object(o.b)("inlineCode",{parentName:"p"},"exp_data.json")," was consistent with ",Object(o.b)("inlineCode",{parentName:"p"},"data.h5"),"."),Object(o.b)("p",null,"Links:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"AnnData structure from scanpy: ",Object(o.b)("a",{parentName:"li",href:"https://scanpy.readthedocs.io/en/stable/usage-principles.html"},"https://scanpy.readthedocs.io/en/stable/usage-principles.html")),Object(o.b)("li",{parentName:"ul"},"Compressed Sparse Column matrix implementation in scipy: to",Object(o.b)("a",{parentName:"li",href:"https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html"},"https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html"))))}p.isMDXComponent=!0},87:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(t),b=a,m=d["".concat(i,".").concat(b)]||d[b]||u[b]||o;return t?r.a.createElement(m,s(s({ref:n},l),{},{components:t})):r.a.createElement(m,s({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);